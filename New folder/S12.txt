slip 12
Q1
// Base class: Continent
class Continent {
    private String name;

    public Continent(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

// Intermediate class: Country
class Country extends Continent {
    private String countryName;

    public Country(String continentName, String countryName) {
        super(continentName);
        this.countryName = countryName;
    }

    public String getCountryName() {
        return countryName;
    }
}

// Derived class: State
class State extends Country {
    private String stateName;

    public State(String continentName, String countryName, String stateName) {
        super(continentName, countryName);
        this.stateName = stateName;
    }

    public String getStateName() {
        return stateName;
    }

    // Method to display details
    public void displayDetails() {
        System.out.println("Continent: " + getName());
        System.out.println("Country: " + getCountryName());
        System.out.println("State: " + getStateName());
    }
}

// Main class
public class MultilevelInheritance {
    public static void main(String[] args) {
        // Create a State object
        State state = new State("North America", "United States", "California");

        // Display the details
        state.displayDetails();
    }
}

----------------------------------------------------------
Q2
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class CricketPlayer {
    private String name;
    private int noOfInnings;
    private int noOfTimesNotOut;
    private int totalRuns;
    private double batAvg;

    // Constructor
    public CricketPlayer(String name, int noOfInnings, int noOfTimesNotOut, int totalRuns) {
        this.name = name;
        this.noOfInnings = noOfInnings;
        this.noOfTimesNotOut = noOfTimesNotOut;
        this.totalRuns = totalRuns;
        this.batAvg = calculateAverage();
    }

    // Calculate batting average
    private double calculateAverage() {
        return noOfInnings == 0 ? 0 : (double) totalRuns / noOfInnings;
    }

    // Static method to get batting average
    public static double avg(CricketPlayer player) {
        return player.batAvg;
    }

    // Getters
    public String getName() {
        return name;
    }

    public double getBatAvg() {
        return batAvg;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Innings: " + noOfInnings + 
               ", Not Out: " + noOfTimesNotOut + 
               ", Total Runs: " + totalRuns + 
               ", Batting Average: " + batAvg;
    }
}

public class CricketPlayerMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of players: ");
        int n = scanner.nextInt();
        CricketPlayer[] players = new CricketPlayer[n];

        // Input player details
        for (int i = 0; i < n; i++) {
            System.out.println("Enter details for player " + (i + 1) + ":");
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Number of Innings: ");
            int innings = scanner.nextInt();
            System.out.print("Number of Times Not Out: ");
            int notOut = scanner.nextInt();
            System.out.print("Total Runs: ");
            int runs = scanner.nextInt();

            players[i] = new CricketPlayer(name, innings, notOut, runs);
        }

        // Sort players based on batting average
        Arrays.sort(players, Comparator.comparingDouble(CricketPlayer::avg).reversed());

        // Display sorted player details
        System.out.println("\nPlayers sorted by Batting Average:");
        for (CricketPlayer player : players) {
            System.out.println(player);
        }

        scanner.close();
    }
}
